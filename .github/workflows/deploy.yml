name: Deploy Discord Bot

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint with biome
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Node
      uses: actions/setup-node@v4
      with:
        node-version: '24.4.0' 

    - name: Install
      run: npm install

    - name: Run lint
      run: npm run lint

  deploy:
    name: Deploy Discord Bot to EC2 via SSM
    runs-on: ubuntu-latest
    needs: lint
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get EC2 Instance ID by Tag
      id: get_instance_id
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=Backend404Instance" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" --output text)

        if [ -z "$INSTANCE_ID" ]; then
          echo "Error: No running instance found with Name tag 'Backend404Instance'."
          exit 1
        fi

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "Found Instance ID: $INSTANCE_ID"
      shell: bash

    - name: Execute deployment script via SSM
      id: ssm_command_execution
      # Pass secrets as environment variables to the remote script
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        GUILD_ID: ${{ secrets.GUILD_ID }} # Optional
        # DISCORD_BOT_WEB_PORT is hardcoded in the .sh script and Nginx config,
        # but you could pass it here if you want it configurable via env.
      run: |
        REMOTE_SCRIPT_PATH="/home/ec2-user/discord-bot/deploy_assets/deploy_discord_bot.sh"
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ env.INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=bash $REMOTE_SCRIPT_PATH" \
          --timeout-seconds 600 \
          --comment "Deploying Discord Bot from GitHub Actions" \
          --output text \
          --cli-input-json '{
            "Parameters": {
              "commands": ["bash '"${REMOTE_SCRIPT_PATH}"'"],
              "environment": [
                "BOT_TOKEN='"${{ env.BOT_TOKEN }}"'",
                "CLIENT_ID='"${{ env.CLIENT_ID }}"'",
                "GUILD_ID='"${{ env.GUILD_ID }}"'"
              ]
            }
          }' \
          --query "Command.CommandId"
        )
        DEPLOYMENT_COMMAND="export BOT_TOKEN='${{ secrets.BOT_TOKEN }}' && \
                            export CLIENT_ID='${{ secrets.CLIENT_ID }}' && \
                            export GUILD_ID='${{ secrets.GUILD_ID }}' && \
                            /bin/bash ${REMOTE_SCRIPT_PATH}"

        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ env.INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=${DEPLOYMENT_COMMAND}" \
          --timeout-seconds 600 \
          --comment "Deploying Discord Bot from GitHub Actions" \
          --query "Command.CommandId" \
          --output text)

        echo "SSM Command ID: $COMMAND_ID"
        echo "::set-output name=command_id::$COMMAND_ID"
      shell: bash 

    - name: Wait for and Check SSM Command Output
      id: ssm_output_check
      run: |
        COMMAND_ID=${{ steps.ssm_command_execution.outputs.command_id }}
        INSTANCE_ID=${{ env.INSTANCE_ID }}
        echo "Waiting for SSM command ($COMMAND_ID) to complete on $INSTANCE_ID..."
        MAX_ATTEMPTS=60 
        ATTEMPT=0
        STATUS=""
        while [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
          STATUS=$(aws ssm list-command-invocations \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "CommandInvocations[0].Status" \
            --output text)

          if [ "$STATUS" == "Success" ]; then
            echo "SSM Command completed successfully."
            break
          elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
            echo "SSM Command failed or was cancelled. See detailed output below."
            exit 1 
          else
            echo "Current status: $STATUS. Waiting..."
            sleep 5 
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done

        if [ "$STATUS" != "Success" ]; then
          echo "SSM Command did not complete within the expected time. Force failing."
          exit 1
        fi

        echo "--- SSM Command Full Output ---"
        aws ssm list-command-invocations \
          --command-id "$COMMAND_ID" \
          --instance-id "$INSTANCE_ID" \
          --details \
          --query "CommandInvocations[].CommandPlugins[].{Output:Output}" \
          --output text
        echo "--- End SSM Command Full Output ---"
      shell: bash
